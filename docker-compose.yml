---
# docker-compose.yml
# Definieert webserver, reverse proxy, en API services in een custom netwerk.
# Gebruikt omgevingsvariabelen uit het .env bestand voor interne configuratie.

services:

  # Statische webserver service
  # Servicenaam moet een letterlijke string zijn, geen variabele.
  webserver:
    image: my-web-server2-alpine
    # Containernaam variabele
    container_name: ${WEB_SERVER_SERVICE_NAME}
    build:
      context: ./webserver
      dockerfile: Dockerfile.webserver
    networks:
      - web-network
    restart: always

  # Backend API applicatie service
  # Servicenaam moet een letterlijke string zijn, geen variabele.
  api-server:
    image: my-api-server
    # Containernaam variabele
    build:
      context: ./api-server
      dockerfile: Dockerfile.api-server
    networks:
      - web-network
    restart: always
    deploy:  # VOEG DEZE SECTIE TOE
      replicas: 2  # Dit zal 2 instanties van de API-server starten
      # De volgende opties zijn voor productie
      # update_config:
      #   parallelism: 1
      #   delay: 10s
      # restart_policy:
      #   condition: on-failure

  # Nginx reverse proxy service
  # Servicenaam moet een letterlijke string zijn, geen variabele.
  reverse-proxy:
    image: my-reverse-proxy
    # Containernaam variabele
    container_name: ${REVERSE_PROXY_SERVICE_NAME}
    build:
      context: ./reverse-proxy
      dockerfile: Dockerfile.reverse-proxy
    ports:
      - "${REVERSE_PROXY_HTTP_PORT}:${REVERSE_PROXY_HTTP_PORT}"     # Poort 80
      # Poort 443
      - "${REVERSE_PROXY_HTTPS_PORT}:${REVERSE_PROXY_HTTPS_PORT}"
    volumes:
      - ./reverse-proxy/reverse_proxy.conf:/etc/nginx/nginx.conf:ro
      - ./reverse-proxy/certs:/etc/nginx/certs:ro
    networks:
      - web-network
    restart: always
    depends_on:
      webserver:
        condition: service_healthy
      api-server:
        condition: service_healthy

# ... (bestaande services zoals webserver, api-server, reverse-proxy) ...

    loki:
      image: grafana/loki:latest
      container_name: loki
      ports:
        - 3100:3100
      command: -config.file=/etc/loki/config.yaml
      volumes:
        - ./loki/config.yaml:/etc/loki/config.yaml
      networks:
        - web-network
      restart: always

    promtail:
      image: grafana/promtail:latest
      container_name: promtail
      command: -config.file=/etc/promtail/config.yaml
      volumes:
        - ./promtail/config.yaml:/etc/promtail/config.yaml
        - /var/lib/docker/containers:/var/lib/docker/containers:ro # Belangrijk: mounts Docker logs
        - /var/run/docker.sock:/var/run/docker.sock:ro # Zodat Promtail Docker info kan krijgen
      networks:
        - web-network
      restart: always
      depends_on:
        - loki

    grafana:
      image: grafana/grafana:latest
      container_name: grafana
      ports:
        - 3000:3000
      volumes:
        - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources # Voor datasource config
        - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards # Voor dashboard config
        - grafana_data:/var/lib/grafana # Voor persistente data (dashboards, users etc.)
      environment:
        - GF_SECURITY_ADMIN_USER=admin
        - GF_SECURITY_ADMIN_PASSWORD=admin # Pas dit aan voor productie!
      networks:
        - web-network
      restart: always
      depends_on:
        - loki

volumes: # VOEG DEZE SECTIE TOE AAN HET EINDE VAN JE DOCKER-COMPOSE.YML
  grafana_data: # Voor persistente Grafana data

# ... (bestaande networks sectie) ...

# Definieer het custom netwerk
networks:
  web-network:
    driver: bridge
    name: my-web-platform-network
