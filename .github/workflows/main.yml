# .github/workflows/main.yml
# GitHub Actions workflow voor het bouwen, testen en linten van het webplatform

name: Docker Compose CI

permissions:
  contents: read

on:
  push:
    branches:
      - main # Voer de workflow uit bij elke push naar de 'main' branch
  pull_request:
    branches:
      - main # Voer de workflow uit bij elke pull request naar de 'main' branch

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Lint Docker Compose YAML
        # Installeer yamllint en lint de docker-compose.yml
        run: |
          sudo apt-get update && sudo apt-get install -y python3-pip
          pip3 install yamllint
          yamllint docker-compose.yml

      - name: Lint Dockerfiles (Hadolint)
        # Download Hadolint en lint de Dockerfiles
        run: |
          wget -qO- https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64 > hadolint
          chmod +x hadolint
          # Gebruik de correcte paden naar de Dockerfiles
          ./hadolint webserver/Dockerfile.webserver
          ./hadolint api-server/Dockerfile.api-server
          ./hadolint reverse-proxy/Dockerfile.reverse-proxy

      - name: Test Nginx Configuration Syntax
        run: |
          mkdir -p ./.github/temp_nginx_config
          echo "events { worker_connections 1024; }" > ./.github/temp_nginx_config/nginx.conf
          echo "http {" >> ./.github/temp_nginx_config/nginx.conf
          echo "    include /etc/nginx/conf.d/default.conf;" >> ./.github/temp_nginx_config/nginx.conf
          echo "}" >> ./.github/temp_nginx_config/nginx.conf

          cp reverse-proxy/reverse_proxy.conf ./.github/temp_nginx_config/default.conf

          # Voer de Nginx syntax test direct uit en vang de output op.
          # Gebruik een tijdelijk bestand voor de output om zeker te zijn van de exit code.
          docker run --rm \
            -v "$(pwd)/.github/temp_nginx_config/nginx.conf:/etc/nginx/nginx.conf:ro" \
            -v "$(pwd)/.github/temp_nginx_config/default.conf:/etc/nginx/conf.d/default.conf:ro" \
            nginx:alpine nginx -t -c /etc/nginx/nginx.conf > NGINX_OUTPUT.txt 2>&1

          # Sla de exit code van de laatste opdracht (docker run) op
          NGINX_EXIT_CODE=$?

          # Lees de output uit het tijdelijke bestand
          NGINX_TEST_OUTPUT=$(cat NGINX_OUTPUT.txt)

          # Print de volledige output voor debugging
          echo "--- NGINX LINTER OUTPUT ---"
          echo "$NGINX_TEST_OUTPUT"
          echo "--- END NGINX LINTER OUTPUT ---"
          echo "Nginx command exited with raw code: $NGINX_EXIT_CODE"

          if [ $NGINX_EXIT_CODE -eq 0 ]; then
            echo "Nginx configuration test successful (exit code 0)."
          elif echo "$NGINX_TEST_OUTPUT" | grep -q "host not found"; then
            echo "Nginx configuration test passed, but with expected 'host not found' warnings. Continuing..."
            exit 0 # Forceer een succesvolle exit code voor deze stap
          else
            echo "Nginx configuration test failed unexpectedly!"
            echo "Nginx command exited with final code: $NGINX_EXIT_CODE" # Dit zou de $NGINX_EXIT_CODE van de docker run moeten zijn
            exit 1 # Laat de job falen voor andere, onverwachte fouten
          fi

          rm -rf ./.github/temp_nginx_config NGINX_OUTPUT.txt

  build-and-test:
    needs: lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Load .env file (for local development variables if any)
        run: |
          echo "WEB_SERVER_SERVICE_NAME=webserver" >> $GITHUB_ENV
          echo "API_SERVER_SERVICE_NAME=api-server" >> $GITHUB_ENV
          echo "REVERSE_PROXY_SERVICE_NAME=reverse-proxy" >> $GITHUB_ENV
          echo "REVERSE_PROXY_HTTP_PORT=80" >> $GITHUB_ENV
          echo "REVERSE_PROXY_HTTPS_PORT=443" >> $GITHUB_ENV

      - name: Generate self-signed SSL certificates
        run: script/generate_certs.sh

      - name: Build and start services
        run: docker compose up -d --build --wait

      - name: List running containers and their health status (for debugging)
        run: docker ps -a

      - name: Get logs for all services (for debugging)
        # Voer dit altijd uit, zelfs bij falen, voor debugging
        if: always()
        run: |
          echo "--- Webserver Logs ---"
          docker logs webserver || true
          echo "--- API Server Logs ---"
          docker logs api-server || true
          echo "--- Reverse Proxy Logs ---"
          docker logs reverse-proxy || true

      - name: Verify Web Server access (via HTTPS)
        run: |
          echo "Verifying web server access (HTTPS)..."
          # Voeg een retry-mechanisme toe voor robuustere tests
          for i in $(seq 1 10); do
            curl -k --fail https://localhost && s=0 && break || s=$?
            echo "Attempt $i failed, retrying in 5 seconds..."
            sleep 5
          done
          if [ $s -eq 0 ]; then
            echo "Web server access successful."
          else
            echo "Web server access failed after multiple retries!"
            exit 1
          fi

      - name: Verify API access (via HTTPS)
        run: |
          echo "Verifying API access (HTTPS)..."
          # Voeg een retry-mechanisme toe voor robuustere tests
          for i in $(seq 1 10); do
            curl -k --fail https://localhost/api && s=0 && break || s=$?
            echo "Attempt $i failed, retrying in 5 seconds..."
            sleep 5
          done
          if [ $s -eq 0 ]; then
            echo "API access successful."
          else
            echo "API access failed after multiple retries!"
            exit 1
          fi

      - name: Stop services (cleanup)
        if: always() # Ruim altijd op, zelfs bij falen
        run: docker compose down
