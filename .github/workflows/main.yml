# .github/workflows/main.yml
# GitHub Actions workflow voor het bouwen, testen en linten van het webplatform

name: Docker Compose CI

permissions:
  contents: read

on:
  push:
    branches:
      - main # Voer de workflow uit bij elke push naar de 'main' branch
  pull_request:
    branches:
      - main # Voer de workflow uit bij elke pull request naar de 'main' branch

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Lint Docker Compose YAML
        # Installeer yamllint en lint de docker-compose.yml
        run: |
          sudo apt-get update && sudo apt-get install -y python3-pip
          pip3 install yamllint
          yamllint docker-compose.yml

      - name: Lint Dockerfiles (Hadolint)
        # Download Hadolint en lint de Dockerfiles
        run: |
          wget -qO- https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64 > hadolint
          chmod +x hadolint
          # Gebruik de correcte paden naar de Dockerfiles
          ./hadolint webserver/Dockerfile.webserver
          ./hadolint api-server/Dockerfile.api-server
          ./hadolint reverse-proxy/Dockerfile.reverse-proxy

      - name: Create dummy Nginx certificates for validation
        run: |
          mkdir -p ./.github/temp_nginx_certs

          openssl req -x509 -nodes -days 1 -newkey rsa:2048 \
            -keyout ./.github/temp_nginx_certs/nginx-selfsigned.key \
            -out ./.github/temp_nginx_certs/nginx-selfsigned.crt \
            -subj "/C=US/ST=State/L=City/O=Org/CN=localhost"

      - name: Validate Nginx Configuration Syntax
        run: |
          mkdir -p ./.github/temp_nginx_config

          cp reverse-proxy/reverse_proxy.conf ./.github/temp_nginx_config/nginx.conf

          echo "--- STARTING NGINX SYNTAX VALIDATION ---"
          # Voer de Nginx syntax test uit. Als deze faalt, zal de stap falen.
          docker run --rm \
            --add-host webserver:127.0.0.1 \
            --add-host api-server:127.0.0.1 \
            -v "$(pwd)/.github/temp_nginx_config/nginx.conf:/etc/nginx/nginx.conf:ro" \
            -v "$(pwd)/.github/temp_nginx_certs:/etc/nginx/certs:ro" \
            nginx:alpine nginx -t -c /etc/nginx/nginx.conf
          echo "--- END NGINX SYNTAX VALIDATION ---"

          # Ruim de tijdelijke directory op
          rm -rf ./.github/temp_nginx_config
          rm -rf ./.github/temp_nginx_certs

  build-and-test:
    needs: lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # --- NIEUWE STAPPEN VOOR DOCKER LOGIN & TAGGING ---
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata (tags)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }} # Naam van je repository als basis voor de image
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }} # 'latest' tag alleen op main branch
            type=sha,format=long # Tag met de lange commit SHA
            type=ref,event=branch # Tag met de branch naam
      # --- EINDE NIEUWE STAPPEN ---

      - name: Load .env file (for local development variables if any)
        run: |
          echo "WEB_SERVER_SERVICE_NAME=webserver" >> $GITHUB_ENV
          echo "API_SERVER_SERVICE_NAME=api-server" >> $GITHUB_ENV
          echo "REVERSE_PROXY_SERVICE_NAME=reverse-proxy" >> $GITHUB_ENV
          echo "REVERSE_PROXY_HTTP_PORT=80" >> $GITHUB_ENV
          echo "REVERSE_PROXY_HTTPS_PORT=443" >> $GITHUB_ENV

      - name: Generate self-signed SSL certificates
        run: |
          chmod +x scripts/generate_certs.sh
          ./scripts/generate_certs.sh

      - name: Build and push services to GHCR
        run: |
          # Basis Image naam (bijv. ghcr.io/sanderhuijbers/future-skills-docker)
          BASE_IMAGE_NAME="ghcr.io/${{ github.repository }}"
          # Genereer de tags als een bash array, gesplitst op komma's
          # De output van ${{ steps.meta.outputs.tags }} is een komma-gescheiden string.
          IFS=',' read -r -a array_of_tags <<< "${{ steps.meta.outputs.tags }}"

          # Functie om een Docker image te bouwen en te pushen met alle relevante tags
          build_and_push_image() {
            local service_name=$1
            local dockerfile_path=$2
            local context_path=$3
            local full_repo_name="${BASE_IMAGE_NAME}-${service_name}" # Bijv. ghcr.io/user/repo-api-server
            local build_command="docker build --file ${dockerfile_path} ${context_path}"

            # Voeg elke tag afzonderlijk toe aan de build command
            for tag in "${array_of_tags[@]}"; do
              build_command+=" --tag ${full_repo_name}:${tag}"
            done

            echo "Executing build command for ${service_name}: $build_command"
            # Gebruik eval om de dynamisch geconstrueerde string uit te voeren
            # Dit is nodig omdat de tags als afzonderlijke argumenten moeten worden doorgegeven.
            eval "$build_command"

            # Push alle getagde images
            for tag in "${array_of_tags[@]}"; do
              echo "Pushing ${full_repo_name}:${tag}"
              docker push "${full_repo_name}:${tag}"
            done
          }

          # Bouw en push de images voor elke service
          build_and_push_image "${{ env.API_SERVER_SERVICE_NAME }}" "api-server/Dockerfile.api-server" "api-server"
          build_and_push_image "${{ env.WEB_SERVER_SERVICE_NAME }}" "webserver/Dockerfile.webserver" "webserver"
          build_and_push_image "${{ env.REVERSE_PROXY_SERVICE_NAME }}" "reverse-proxy/Dockerfile.reverse-proxy" "reverse-proxy"

          # Start dan de services met de lokaal gebouwde images
          # De images zijn nu gepusht naar GHCR. Voor de CI/CD tests gebruiken we de lokaal gebouwde varianten.
          docker compose up -d --wait
