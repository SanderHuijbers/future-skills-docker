# .github/workflows/main.yml
# GitHub Actions workflow voor het bouwen, testen en linten van het webplatform

name: Docker Compose CI

on:
  push:
    branches:
      - main # Voer de workflow uit bij elke push naar de 'main' branch
  pull_request:
    branches:
      - main # Voer de workflow uit bij elke pull request naar de 'main' branch

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Lint Docker Compose YAML
        # Installeer yamllint en lint de docker-compose.yml
        run: |
          sudo apt-get update && sudo apt-get install -y python3-pip
          pip3 install yamllint
          yamllint docker-compose.yml

      - name: Lint Dockerfiles (Hadolint)
        # Download Hadolint en lint de Dockerfiles
        run: |
          wget -qO- https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64 > hadolint
          chmod +x hadolint
          ./hadolint Dockerfile.webserver
          ./hadolint Dockerfile.api-server
          ./hadolint Dockerfile.reverse-proxy

      - name: Test Nginx Configuration Syntax
        # Bouw een tijdelijke Nginx container om de configuratie te testen
        # Dit is de meest betrouwbare manier om de Nginx config te valideren in CI
        run: |
          docker build -t temp-nginx-linter -f reverse-proxy/Dockerfile.reverse-proxy reverse-proxy/
          docker run --rm temp-nginx-linter nginx -t -c /etc/nginx/nginx.conf # Test de hoofdconfiguratie

  # BELANGRIJKE CORRECTIE: Deze job moet op hetzelfde indentatieniveau staan als 'lint'
  build-and-test:
    needs: lint # Deze job wacht nu tot de 'lint' job is voltooid en succesvol is
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Load .env file
        # GitHub Actions hebben geen ingebouwde support voor .env files zoals Docker Compose dat heeft.
        # We moeten de variabelen expliciet laden of doorgeven.
        # Voor nu gebruiken we de letterlijke servicenamen in docker-compose.yml,
        # dus de .env variabelen voor containernamen zijn niet direct nodig voor de build.
        # Maar als je ze in andere scripts zou gebruiken, zou je ze hier kunnen parsen.
        run: |
          echo "WEB_SERVER_SERVICE_NAME=webserver" >> $GITHUB_ENV
          echo "API_SERVER_SERVICE_NAME=api-server" >> $GITHUB_ENV
          echo "REVERSE_PROXY_SERVICE_NAME=reverse-proxy" >> $GITHUB_ENV
          echo "REVERSE_PROXY_HTTP_PORT=80" >> $GITHUB_ENV
          echo "REVERSE_PROXY_HTTPS_PORT=443" >> $GITHUB_ENV

      - name: Build and start services
        run: docker compose up -d --build --wait # --wait wacht tot containers healthy zijn
        # De --wait vlag is cruciaal voor CI/CD om te wachten op healthchecks

      - name: Verify Web Server access
        run: |
          echo "Verifying web server access..."
          curl --fail http://localhost
          if [ $? -eq 0 ]; then
            echo "Web server access successful."
          else
            echo "Web server access failed!"
            exit 1
          fi

      - name: Verify API access
        run: |
          echo "Verifying API access..."
          curl --fail http://localhost/api
          if [ $? -eq 0 ]; then
            echo "API access successful."
          else
            echo "API access failed!"
            exit 1
          fi

      - name: List running containers (for debugging)
        if: always() # Voer dit altijd uit, zelfs bij falen, voor debugging
        run: docker ps -a

      - name: Stop services (cleanup)
        if: always() # Ruim altijd op, zelfs bij falen
        run: docker compose down
