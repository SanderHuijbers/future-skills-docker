# .github/workflows/main.yml
# GitHub Actions workflow voor het bouwen, testen en linten van het webplatform

name: Docker Compose CI

permissions:
  contents: read

on:
  push:
    branches:
      - main # Voer de workflow uit bij elke push naar de 'main' branch
  pull_request:
    branches:
      - main # Voer de workflow uit bij elke pull request naar de 'main' branch

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Lint Docker Compose YAML
        # Installeer yamllint en lint de docker-compose.yml
        run: |
          sudo apt-get update && sudo apt-get install -y python3-pip
          pip3 install yamllint
          yamllint docker-compose.yml

      - name: Lint Dockerfiles (Hadolint)
        # Download Hadolint en lint de Dockerfiles
        run: |
          wget -qO- https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64 > hadolint
          chmod +x hadolint
          # Gebruik de correcte paden naar de Dockerfiles
          ./hadolint webserver/Dockerfile.webserver
          ./hadolint api-server/Dockerfile.api-server
          ./hadolint reverse-proxy/Dockerfile.reverse-proxy

      - name: Create dummy Nginx certificates for validation
        run: |
          mkdir -p ./.github/temp_nginx_certs

          openssl req -x509 -nodes -days 1 -newkey rsa:2048 \
            -keyout ./.github/temp_nginx_certs/nginx-selfsigned.key \
            -out ./.github/temp_nginx_certs/nginx-selfsigned.crt \
            -subj "/C=US/ST=State/L=City/O=Org/CN=localhost"

      - name: Validate Nginx Configuration Syntax
        run: |
          mkdir -p ./.github/temp_nginx_config

          cp reverse-proxy/reverse_proxy.conf ./.github/temp_nginx_config/nginx.conf

          echo "--- STARTING NGINX SYNTAX VALIDATION ---"
          # Voer de Nginx syntax test uit. Als deze faalt, zal de stap falen.
          docker run --rm \
            --add-host webserver:127.0.0.1 \
            --add-host api-server:127.0.0.1 \
            -v "$(pwd)/.github/temp_nginx_config/nginx.conf:/etc/nginx/nginx.conf:ro" \
            -v "$(pwd)/.github/temp_nginx_certs:/etc/nginx/certs:ro" \
            nginx:alpine nginx -t -c /etc/nginx/nginx.conf
          echo "--- END NGINX SYNTAX VALIDATION ---"

          # Ruim de tijdelijke directory op
          rm -rf ./.github/temp_nginx_config
          rm -rf ./.github/temp_nginx_certs

  build-and-test:
    needs: lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # --- NIEUWE STAPPEN VOOR DOCKER LOGIN & TAGGING ---
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata (tags)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }} # Naam van je repository als basis voor de image
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }} # 'latest' tag alleen op main branch
            type=sha,format=long # Tag met de lange commit SHA
            type=ref,event=branch # Tag met de branch naam
      # --- EINDE NIEUWE STAPPEN ---

      - name: Load .env file (for local development variables if any)
        run: |
          echo "WEB_SERVER_SERVICE_NAME=webserver" >> $GITHUB_ENV
          echo "API_SERVER_SERVICE_NAME=api-server" >> $GITHUB_ENV
          echo "REVERSE_PROXY_SERVICE_NAME=reverse-proxy" >> $GITHUB_ENV
          echo "REVERSE_PROXY_HTTP_PORT=80" >> $GITHUB_ENV
          echo "REVERSE_PROXY_HTTPS_PORT=443" >> $GITHUB_ENV

      - name: Generate self-signed SSL certificates
        run: |
          chmod +x scripts/generate_certs.sh
          ./scripts/generate_certs.sh

      # AANPASSING: Docker Compose build moet nu gebruikmaken van de tags
      - name: Build and push services to GHCR
        run: |
          # De services moeten nu expliciet worden gebouwd en getagd met de berekende GHCR tags
          # Voorbeeld voor webserver: docker compose build webserver
          # Daarna docker push ghcr.io/jouw-gebruikersnaam/jouw-repository-webserver:tag
          # Dit is complexer met docker compose direct, makkelijker is de images individueel te bouwen en pushen
          # Wees voorzichtig met de `docker compose up --build` als je dit combineert met `docker push`
          # Beter is: Eerst build, dan run, dan push.

          # Eerste bouwen zonder direct op te starten (of met --no-start)
          # We gebruiken hier de DOCKER_BUILDKIT=1 voor betere build support

          # Bouw de api-server image en tag deze
          docker build \
            --tag ${{ steps.meta.outputs.tags }}-${{ env.API_SERVER_SERVICE_NAME }} \
            --file api-server/Dockerfile.api-server \
            api-server

          # Bouw de webserver image en tag deze
          docker build \
            --tag ${{ steps.meta.outputs.tags }}-${{ env.WEB_SERVER_SERVICE_NAME }} \
            --file webserver/Dockerfile.webserver \
            webserver

          # Bouw de reverse-proxy image en tag deze
          docker build \
            --tag ${{ steps.meta.outputs.tags }}-${{ env.REVERSE_PROXY_SERVICE_NAME }} \
            --file reverse-proxy/Dockerfile.reverse-proxy \
            reverse-proxy

          # Nu push je de getagde images naar GHCR
          docker push ${{ steps.meta.outputs.tags }}-${{ env.API_SERVER_SERVICE_NAME }}
          docker push ${{ steps.meta.outputs.tags }}-${{ env.WEB_SERVER_SERVICE_NAME }}
          docker push ${{ steps.meta.outputs.tags }}-${{ env.REVERSE_PROXY_SERVICE_NAME }}

          # Start dan de services met de *nieuw getagde* images
          # Pas je docker-compose.yml aan om deze getagde images te gebruiken
          # Hiervoor moeten de 'image' velden in docker-compose.yml dynamisch worden,
          # of je moet de services bouwen en dan pas lokaal taggen en runnen.
          # De meest gangbare manier is dat je docker-compose.yml zelf de "image" velden bijwerkt
          # naar de gepushte images, of je werkt met environment variabelen.

          # Voor nu houden we de services up-en-running zoals ze lokaal gebouwd worden
          # en pushen we de images los. De `docker compose up -d --build --wait` is hier niet meer nodig in de
          # huidige vorm, tenzij je de `image` velden in docker-compose.yml aanpast.
          # Laten we voor deze stap de `docker compose up -d --build --wait` vervangen door:
          # docker compose up -d --wait
          # Zodat het de *lokaal gebouwde* images gebruikt (of later de gepushte als docker-compose.yml is aangepast)
          docker compose up -d --wait # Start de services na de build en push

      # ... (rest van de build-and-test job, inclusief Run Backend Unit Tests, List running containers, Get logs, Verify access, Stop services) ...
